
//  https://pest.rs https://pest.rs/book/precedence.html
//  https://en.wikipedia.org/wiki/Parsing_expression_grammar

    expr        =  { SOI ~ sum ~ NEWLINE* ~ EOI }
    sum         =  { product ~ ((add | sub) ~ product)* }
    product     =  { value   ~ ((mul | div) ~   value)* }
//  power       =  { value ~ (pow ~ power)? }   // exponential
//  factorial   = @{ value ~ fac }
//  negation    = @{ neg ~ value }  // sequence operator is written as a tilde
//  rational    = @{ "("  ~ integer ~ "/" ~ integer ~ ")" }     // XXX:
    value       =  { integer | ("(" ~ sum ~ ")") }
    integer     = @{ "-"? ~ ('0'..'9')+ }
    WHITESPACE  = _{ " " | "\t" }   // be silent with a leading low line (underscore)
    // whitespace-sensitive need to be marked atomic with a leading at sign

        add =  { "+" } // Addition
        sub =  { "-" } // Subtraction
        mul =  { "*" | "ร" } // Multiplication
        div =  { "/" | "รท" } // Division
//      pow =  { "^" } // Exponentiation
//      neg =  { "-" } // Negation
//      fac =  { "!" } // Factorial

//  main    =  { SOI ~ expr ~ EOI }
//  expr    =  { prefix* ~ primary ~ postfix* ~ (infix ~ prefix* ~ primary ~ postfix*)* }
//  infix   = _{ add | sub | mul | div | pow }
//  postfix = _{ fac }
//  prefix  = _{ neg }
//  primary = _{ int | "(" ~ expr ~ ")" }
//  int     = @{ (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT+ | ASCII_DIGIT) }
//  WHITESPACE  = _{ " " | "\t" | NEWLINE }

